                                                                                                                                                                                                                                                                /* ==============================
   SISTEMA DE MENSAGENS E NOTIFICA√á√ïES
   ============================== */
// Este arquivo gerencia o sistema de mensagens entre pacientes e psic√≥logos
// Utiliza Context API para compartilhar estado global das mensagens

import { createContext, useContext, useState, useEffect, useCallback } from "react";

// Cria o contexto para compartilhar dados das mensagens entre componentes
const RequestContext = createContext();

// Hook personalizado para acessar o contexto de mensagens
// Facilita o uso do contexto em outros componentes
export const useRequest = () => useContext(RequestContext);

/* ==============================
   COMPONENTE DE NOTIFICA√á√ÉO INDIVIDUAL
   ============================== */
// Componente que renderiza uma √∫nica notifica√ß√£o/mensagem
// Props: request (dados da mensagem), onRemove (fun√ß√£o para remover), onAction (a√ß√µes da mensagem)
const RequestNotification = ({ request, onRemove, onAction }) => {
    // Estado para controlar se a notifica√ß√£o est√° vis√≠vel (anima√ß√£o de entrada/sa√≠da)
    const [isVisible, setIsVisible] = useState(false);
    // Estado para controlar se uma a√ß√£o est√° sendo processada (loading)
    const [isProcessing, setIsProcessing] = useState(false);

    // Fun√ß√£o para fechar a notifica√ß√£o com anima√ß√£o
    // useCallback evita recria√ß√£o desnecess√°ria da fun√ß√£o
    const handleClose = useCallback(() => {
        setIsVisible(false); // Inicia anima√ß√£o de sa√≠da
        setTimeout(() => onRemove(request.id), 300); // Remove ap√≥s anima√ß√£o (300ms)
    }, [onRemove, request.id]);

    // Efeito para mostrar a notifica√ß√£o e configurar auto-fechamento
    useEffect(() => {
        setIsVisible(true); // Mostra a notifica√ß√£o com anima√ß√£o
        // Se a mensagem tem auto-fechamento ativado
        if (request.autoClose) {
            // Define timer para fechar automaticamente (padr√£o: 8 segundos)
            const timer = setTimeout(handleClose, request.duration || 8000);
            // Cleanup: limpa o timer se o componente for desmontado
            return () => clearTimeout(timer);
        }
    }, [request.autoClose, request.duration, handleClose]);

    // Fun√ß√£o para processar a√ß√µes da notifica√ß√£o (responder, marcar como lida, etc.)
    const handleAction = async (action, data) => {
        setIsProcessing(true); // Ativa estado de loading
        try {
            // Executa a a√ß√£o passada como prop (ex: responder mensagem)
            await onAction(request.id, action, data);
            handleClose(); // Fecha a notifica√ß√£o ap√≥s sucesso
        } catch (error) {
            console.error('Erro ao processar a√ß√£o:', error);
        } finally {
            setIsProcessing(false); // Desativa loading independente do resultado
        }
    };

    // Fun√ß√£o que retorna o √≠cone baseado no tipo da mensagem
    const getIcon = () => {
        switch (request.type) {
            case "message": return "üí¨"; // √çcone de mensagem
            default: return "üìã"; // √çcone padr√£o
        }
    };

    // Fun√ß√£o que retorna as cores baseadas na prioridade da mensagem
    const getColors = () => {
        switch (request.priority) {
            case "high": return "bg-red-50 border-red-200 text-red-800"; // Vermelho para alta prioridade
            case "medium": return "bg-yellow-50 border-yellow-200 text-yellow-800"; // Amarelo para m√©dia
            case "low": return "bg-blue-50 border-blue-200 text-blue-800"; // Azul para baixa
            default: return "bg-gray-50 border-gray-200 text-gray-800"; // Cinza padr√£o
        }
    };

    // Renderiza√ß√£o da notifica√ß√£o
    return (
        // Container principal com anima√ß√µes e cores din√¢micas
        <div className={`relative max-w-md w-full rounded-xl shadow-lg border-2 overflow-hidden backdrop-blur-sm transform transition-all duration-300 ease-in-out ${isVisible ? "translate-x-0 opacity-100 scale-100" : "translate-x-full opacity-0 scale-95"} ${getColors()}`}>
            <div className="p-4">
                {/* Cabe√ßalho com √≠cone, t√≠tulo e bot√£o fechar */}
                <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center gap-2">
                        {/* √çcone da mensagem */}
                        <span className="text-xl">{getIcon()}</span>
                        <div>
                            {/* T√≠tulo da mensagem */}
                            <h4 className="font-semibold text-sm">{request.title}</h4>
                            {/* Remetente da mensagem */}
                            <p className="text-xs opacity-70">{request.from}</p>
                        </div>
                    </div>
                    {/* Bot√£o para fechar a notifica√ß√£o */}
                    <button onClick={handleClose} className="text-gray-400 hover:text-gray-600 transition-colors">
                        ‚úï
                    </button>
                </div>
                
                {/* Conte√∫do da mensagem */}
                <p className="text-sm mb-4 leading-relaxed">{request.message}</p>
                
                {/* Bot√µes de a√ß√£o (se existirem) */}
                {request.actions && (
                    <div className="flex gap-2 mt-3">
                        {/* Mapeia as a√ß√µes dispon√≠veis */}
                        {request.actions.map((action, index) => (
                            <button
                                key={index}
                                onClick={() => handleAction(action.type, action.data)}
                                disabled={isProcessing} // Desabilita durante processamento
                                className={`px-3 py-1.5 rounded-lg text-xs font-medium transition-all ${action.primary ? "bg-blue-600 text-white hover:bg-blue-700" : "bg-gray-200 text-gray-700 hover:bg-gray-300"} ${isProcessing ? "opacity-50 cursor-not-allowed" : ""}`}
                            >
                                {/* Mostra loading ou texto do bot√£o */}
                                {isProcessing ? "..." : action.label}
                            </button>
                        ))}
                    </div>
                )}
            </div>
            
            {/* Barra vermelha pulsante para mensagens de alta prioridade */}
            {request.priority === "high" && (
                <div className="absolute top-0 left-0 w-full h-1 bg-red-500 animate-pulse" />
            )}
        </div>
    );
};

/* ==============================
   PROVEDOR DO CONTEXTO DE MENSAGENS
   ============================== */
// Componente que fornece o contexto de mensagens para toda a aplica√ß√£o
// Gerencia o estado global das mensagens e fornece fun√ß√µes para manipul√°-las
export const RequestProvider = ({ children }) => {
    // Estado que armazena todas as mensagens/solicita√ß√µes ativas
    const [requests, setRequests] = useState([]);

    // Fun√ß√£o para adicionar uma nova mensagem/solicita√ß√£o
    const addRequest = (requestData) => {
        // Gera ID √∫nico combinando timestamp e n√∫mero aleat√≥rio
        const id = Date.now() + Math.random();
        // Cria objeto da mensagem com dados padr√£o + dados fornecidos
        const request = {
            id,
            timestamp: new Date().toISOString(), // Data/hora de cria√ß√£o
            autoClose: false, // Por padr√£o n√£o fecha automaticamente
            priority: "medium", // Prioridade padr√£o
            ...requestData // Sobrescreve com dados fornecidos
        };
        // Adiciona a nova mensagem ao estado
        setRequests(prev => [...prev, request]);
        return id; // Retorna o ID para refer√™ncia
    };

    // Fun√ß√£o para remover uma mensagem pelo ID
    const removeRequest = (id) => {
        setRequests(prev => prev.filter(r => r.id !== id));
    };

    // Fun√ß√£o para processar a√ß√µes das mensagens (responder, marcar como lida, etc.)
    const handleAction = async (requestId, action, data) => {
        console.log('A√ß√£o processada:', { requestId, action, data });
        // Simula processamento ass√≠ncrono (substitua por chamada real da API)
        await new Promise(resolve => setTimeout(resolve, 1000));
        // Remove a mensagem ap√≥s processar a a√ß√£o
        removeRequest(requestId);
    };

    // Fun√ß√£o de conveni√™ncia para enviar mensagens
    // Configura automaticamente os par√¢metros para mensagens
    const sendMessage = (from, message, priority = "low") => {
        return addRequest({
            type: "message", // Tipo: mensagem
            title: "Nova Mensagem", // T√≠tulo padr√£o
            from, // Remetente
            message, // Conte√∫do da mensagem
            priority, // Prioridade (baixa por padr√£o)
            autoClose: true, // Mensagens fecham automaticamente
            duration: 6000, // Dura√ß√£o: 6 segundos
            // A√ß√µes dispon√≠veis para o psic√≥logo
            actions: [
                { type: "reply", label: "Responder", primary: true }, // A√ß√£o principal
                { type: "mark_read", label: "Marcar como lida" } // A√ß√£o secund√°ria
            ]
        });
    };

    // Fornece o contexto com todas as fun√ß√µes e dados para os componentes filhos
    return (
        <RequestContext.Provider value={{ addRequest, sendMessage, requests, removeRequest, handleAction }}>
            {children}
        </RequestContext.Provider>
    );
};